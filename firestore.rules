
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user data (still used for /users rules)
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Rules for user profiles
    match /users/{userId} {
      // Allow users to read their own profile
      allow read: if request.auth.uid == userId;
      // Allow authenticated users to create their own profile
      allow create: if request.auth.uid == userId;
      // Allow admins to update any user's role
      // And allow users to update their own non-role profile information
      allow update: if getUserData(request.auth.uid).role == 'admin' || 
                       (request.auth.uid == userId && !('role' in request.resource.data));
    }
    match /users/{document=**} {
      // Allow admins to list all users
      allow list: if getUserData(request.auth.uid).role == 'admin';
    }

    // Rules for threat models
    match /threatModels/{modelId} {
      allow create: if request.auth.uid != null; 
      allow read, update, delete: if request.auth.uid != null && resource.data.userId == request.auth.uid;
    }
    match /threatModels {
      allow list: if request.auth.uid != null; 
    }
    
    // Rules for stencils - Using direct get() for role check
    match /stencils/{stencilId} {
      // Only admins can manage stencils
      allow read, write: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    match /stencils {
      // Only admins can list stencils
      allow list: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
