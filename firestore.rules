
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is an admin
    function isAdmin() {
      // Assumes user documents are in a 'users' collection and admin users have a 'role' field set to 'admin'
      // This requires the user to be able to read their own user document.
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read any user profile
      // Users can read their own profile (needed for isAdmin() and general profile display)
      allow read: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
      // Users can create their own profile document (e.g., on signup)
      allow create: if isAuthenticated() && request.auth.uid == userId;
      // Admins can update any user profile (e.g., to change roles)
      // Users can update their own profile (e.g., display name, photoURL)
      allow update: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
      // Generally, users should not be able to delete their own profiles directly through client-side requests
      // Deletion might be handled by an admin or a specific server-side process
      allow delete: if isAdmin();
    }

    // Rules for the 'threatModels' collection
    match /threatModels/{modelId} {
      allow create: if isAuthenticated(); // Any authenticated user can create
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid; // Owner can read
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid; // Owner can update
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid; // Owner can delete
    }
    // It's generally better to secure list operations with specific queries if possible,
    // but if a user needs to list all their own models, the query must include `where('userId', '==', request.auth.uid)`
    // and the rule here allows any authenticated user to attempt a list, relying on client-side filtering.
    match /threatModels {
      allow list: if isAuthenticated();
    }

    // Rules for the 'stencils' collection
    match /stencils/{stencilId} {
      // TEMPORARILY PUBLIC FOR DEBUGGING - REVERT THIS
      allow read, list: if true; 
      // Original: allow read, list: if isAuthenticated(); // All authenticated users can read/list stencils
      allow create, update, delete: if isAdmin(); // Only admins can CUD stencils
    }
  }
}
