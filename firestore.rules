
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user data
    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    // User profiles:
    // Allow users to read their own profile
    // Allow admins to read any profile
    // Allow users to create their own profile (e.g., on signup)
    // Allow admins to update any profile (e.g., to change roles)
    match /users/{userId} {
      allow read: if request.auth.uid == userId || getUserData(request.auth.uid).role == 'admin';
      allow create: if request.auth.uid == userId; // User creates their own profile
      allow update: if getUserData(request.auth.uid).role == 'admin'; // Only admins can update user profiles (e.g., roles)
      // Delete typically not allowed or admin only
    }

    // Threat models:
    // Users can CRUD their own models
    // Admins could potentially have broader access if needed in future (not implemented here)
    match /threatModels/{modelId} {
      allow create: if request.auth != null; // User ID check will be in application logic
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
     // Allow listing models for the authenticated user (queries must be secured by `where('userId', '==', request.auth.uid)`)
    match /threatModels {
      allow list: if request.auth != null;
    }


    // Stencils:
    // Only admins can read, list, create, update, delete stencils
    match /stencils/{stencilId} {
      allow read, create, update, delete: if getUserData(request.auth.uid).role == 'admin';
    }
    match /stencils {
      allow list: if getUserData(request.auth.uid).role == 'admin';
    }
  }
}
