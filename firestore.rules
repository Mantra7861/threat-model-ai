
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if a user has the 'admin' role.
    function isAdmin(userId) {
      // It's good practice to check if the document exists before accessing .data
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Users collection:
    match /users/{userId} {
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin(request.auth.uid));
      allow update, delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }
    match /users {
      allow list: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // ThreatModels collection:
    match /threatModels/{modelId} {
      allow create: if isAuthenticated(); // UserID is set in the document by client
      allow read, update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    match /threatModels {
       allow list: if isAuthenticated(); // Client queries by userId
    }

    // Stencils collection: Only admins can manage stencils
    match /stencils/{stencilId} {
      allow read, write: if isAuthenticated() && isAdmin(request.auth.uid);
    }
    match /stencils {
      allow list: if isAuthenticated() && isAdmin(request.auth.uid);
    }
  }
}
