rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get user data (role)
    // IMPORTANT: Ensure 'users' collection and 'role' field exist.
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // Helper function to check if the authenticated user is an admin
    // This is the version from your working rules for user management.
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
      allow delete: if isAdmin();
    }
    match /users {
      allow list: if isAdmin(); 
    }

    // Rules for the 'threatModels' collection
    match /threatModels/{modelId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    match /threatModels {
      allow list: if isAuthenticated(); // Client queries with where('userId', '==', request.auth.uid)
    }

    // Rules for the 'stencils' collection
    match /stencils/{stencilId} {
      // Admins can read, create, update, delete individual stencils
      allow read, write: if isAdmin(); // Uses the isAdmin() function defined above
    }
    match /stencils {
      // Admins can list all stencils
      allow list: if isAdmin(); // Uses the isAdmin() function defined above
    }
  }
}
