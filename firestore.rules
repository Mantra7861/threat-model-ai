
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is an admin
    function isAdmin() {
      // Assumes user documents are in a 'users' collection and admin users have a 'role' field set to 'admin'
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
      allow delete: if isAdmin();
    }
    match /users {
      allow list: if isAdmin();
    }

    // Rules for the 'threatModels' collection
    match /threatModels/{modelId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    match /threatModels {
      allow list: if isAuthenticated();
    }

    // Rules for the 'stencils' collection
    // TEMPORARILY SIMPLIFIED FOR DEBUGGING PERMISSIONS
    match /stencils/{stencilId} {
      allow read, write: if isAuthenticated(); // Any authenticated user can read/write individual stencils
    }
    match /stencils {
      allow list: if isAuthenticated(); // Any authenticated user can list stencils
    }
  }
}
