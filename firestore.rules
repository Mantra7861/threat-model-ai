rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user data
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow admin to read/write any user profile
      allow read, write: if isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
      // Allow authenticated users to read their own profile
      allow get: if isAuthenticated() && request.auth.uid == userId;
      // Allow authenticated users to create their own profile (on signup)
      allow create: if isAuthenticated();
    }

    match /users/{document=**} {
        allow list: if isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }

    // Rules for 'threatModels' collection
    match /threatModels/{modelId} {
      allow create: if isAuthenticated();
      // User can r/u/d their own models, or admin can r/u/d any model
      allow read, update, delete: if (isAuthenticated() && resource.data.userId == request.auth.uid) || (isAuthenticated() && getUserData(request.auth.uid).role == 'admin');
    }
    match /threatModels/{document=**} {
      allow list: if isAuthenticated(); // Client filters by userId
    }

    // Rules for 'stencils' collection
    match /stencils/{stencilId} {
      // Admins can read, write, create, delete stencils
      allow read, write, create, delete: if isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }
    match /stencils/{document=**} {
      // Admins can list all stencils
      allow list: if isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }
  }
}
