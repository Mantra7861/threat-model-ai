
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user data
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return isAuthenticated() && getUserData(userId).role == 'admin';
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Users collection:
    // Allow users to read their own profile
    // Allow admins to read and update any user profile (for role changes)
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin(request.auth.uid));
      allow create: if isAuthenticated(); // Allow creating user profile on signup
      allow update: if isAuthenticated() && isAdmin(request.auth.uid); // Only admins can update roles
      // Deny delete by default unless specified
      allow delete: if false; 
    }
    match /users {
        allow list: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // ThreatModels collection:
    // Users can manage their own threat models
    match /threatModels/{modelId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    match /threatModels {
        // Allow users to list models where their userId matches (client-side query)
        allow list: if isAuthenticated();
    }

    // Stencils collection: Only admins can manage stencils
    // Individual stencil documents (read, create, update, delete)
    match /stencils/{stencilId} {
      allow read, write: if isAuthenticated() && isAdmin(request.auth.uid);
    }
    // Listing stencils (collection query)
    match /stencils {
      // TEMPORARY DIAGNOSTIC RULE: Allow anyone to list stencils
      allow list: if true; 
    }
  }
}
