
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get user data (requires read access to the user's own document)
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // Helper function to check if the authenticated user is an admin
    // Relies on the user having read access to their own user document.
    function isAdmin() {
      return isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read any user profile
      // Users can read their own profile (needed for isAdmin() and general profile display)
      allow read: if isAuthenticated() && (isAdmin() || request.auth.uid == userId);
      
      // Admins can update any user profile (e.g., to change roles)
      // Users can update their own profile details (but not their role unless they are admin and updating their own)
      allow update: if isAuthenticated() && (isAdmin() || request.auth.uid == userId);
      
      // Users can create their own profile document (e.g., on signup)
      // Role should ideally be set by trusted server code or default to 'editor'
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // Only admins can delete user documents
      allow delete: if isAuthenticated() && isAdmin();
    }
    match /users {
      // Only admins can list all users
      allow list: if isAuthenticated() && isAdmin();
    }

    // Rules for the 'threatModels' collection
    match /threatModels/{modelId} {
      allow create: if isAuthenticated(); // Any authenticated user can create
      // Owner can read, update, delete.
      allow read, update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    match /threatModels {
      // Users can list models, client-side query should filter by userId.
      allow list: if isAuthenticated();
    }

    // Rules for the 'stencils' collection
    match /stencils/{stencilId} {
      // Only admins can read, create, update, or delete stencils
      allow read, create, update, delete: if isAdmin();
    }
    match /stencils {
      // Only admins can list stencils
      allow list: if isAdmin();
    }
  }
}
