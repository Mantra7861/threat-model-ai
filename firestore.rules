
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    // It's good practice to ensure userId is not null before get
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || getUserData(request.auth.uid).role == 'admin');
      allow create: if isAuthenticated(); // Allow user to create their own profile doc if auth UID matches
      allow update: if isAuthenticated() && (request.auth.uid == userId || getUserData(request.auth.uid).role == 'admin');
      // No delete rule for users means deletion is disallowed by default
    }
    match /users {
      allow list: if isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }

    // ThreatModels collection
    match /threatModels/{modelId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if isAuthenticated() && getUserData(request.auth.uid).role == 'editor' && resource.data.userId == request.auth.uid ||
                                     isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }
    match /threatModels {
      // Allow authenticated users to list models; client-side should filter by userId
      allow list: if isAuthenticated();
    }

    // Stencils collection: Only admins can manage stencils
    match /stencils/{stencilId} {
      // Read and Write (create, update, delete) for individual stencils remain admin-only
      allow read, write: if isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }
    match /stencils {
      // TEMPORARY DIAGNOSTIC: Allow any authenticated user to list stencils
      allow list: if isAuthenticated();
    }
  }
}
