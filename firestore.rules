
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated(); // Any authenticated user can read user profiles (e.g., for display names, avatars)
      allow create: if isAuthenticated() && request.auth.uid == userId; // User can create their own profile doc
      allow update: if isAuthenticated() && (request.auth.uid == userId || isAdmin()); // User can update their own, admin can update any
      // Delete of user profiles might be restricted or handled by admin functions
    }

    // ThreatModels collection
    match /threatModels/{modelId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    // For querying/listing models - ensure client-side queries enforce userId
    // A broad list rule like this might be too permissive if not careful with client queries.
    // More specific list rules might be needed based on query patterns.
    match /threatModels {
       allow list: if isAuthenticated(); // Client must query by userId: query(collection(db, 'threatModels'), where('userId', '==', currentUser.uid))
    }

    // Stencils collection
    match /stencils/{stencilId} {
      allow read: if isAdmin(); // Admins can read individual stencils
      allow create: if isAdmin(); // Admins can create stencils
      allow update: if isAdmin(); // Admins can update stencils
      allow delete: if isAdmin(); // Admins can delete stencils
    }
    match /stencils {
      allow list: if isAdmin(); // Admins can list all stencils (e.g., for the admin panel)
    }
  }
}

function isAuthenticated() {
  return request.auth != null;
}

// Helper function to check if the requesting user is an admin
function isAdmin() {
  return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
}
