rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user data
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && (request.auth.uid == userId || getUserData(request.auth.uid).role == 'admin');
      allow delete: if isAuthenticated() && getUserData(request.auth.uid).role == 'admin'; // Only admins can delete users
    }
    match /users/{document=**} { // For listing users
      allow list: if isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }

    // Rules for 'threatModels' collection
    match /threatModels/{modelId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    // Allow users to list their own models (query by userId in client-side code)
    match /threatModels {
      allow list: if isAuthenticated();
    }

    // Rules for 'stencils' collection
    match /stencils/{stencilId} {
      // TEMPORARY DIAGNOSTIC RULE - VERY PERMISSIVE
      allow read: if true;
      allow create: if isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
      allow update: if isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
      allow delete: if isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }
    match /stencils {
      // TEMPORARY DIAGNOSTIC RULE - VERY PERMISSIVE
      allow list: if true;
    }
  }
}
